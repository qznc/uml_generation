@startuml

box "model"
	participant "outer:Abstraction" as outer
	participant "a:Application" as a
	participant "left:Abstraction" as left
	participant "right:LambdaTerm" as right
end box

note right of right
	term is
	\x.((\y.A) right)
	aka
	new Abstraction("x", new Application(new Abstraction("y", A), right));
end note

[->a: registerObserver(old)
activate a
[<--a
deactivate a

[->outer: outer.oneBetaReduction()
activate outer
outer -> a: a.oneBetaReduction()
activate a
a -> left: left.apply(right)
activate left

group alpha conversion
	left -> right: right.getFreeNames()
	activate right
	note over right: collect names ...
	left <-- right: Set<String> names
	deactivate right
	create "conv:AlphaConversionVisitor" as conv
	left -> conv: new(names)
	activate conv
	left <-- conv
	deactivate conv
	left ->]: right.accept(conv)
	left <--]
	destroy conv
end

group substitution
	create "sub:SubstitutionVisitor" as sub
	left -> sub: new(this.name,right)
	activate sub
	left <-- sub
	deactivate sub
	left ->]: this.body.accept(sub)
	left <--]
	deactivate sub
	destroy sub
end

a <-- left: changed
deactivate left

box "view"
	participant "old:OldAlligator" as old
end box

note over a
	in this example:
	changed != left && changed != null
end note

group notify observers of change
	a -> old: observer[0].notifyExchange(a,changed)
	activate old
	note over old: update display ...
	a <-- old
	deactivate old
end

outer <-- a: changed
deactivate a

note over outer
	changed != body && changed != null
	thus: this.body = changed
end note
[<-- outer: null

deactivate outer

@enduml
